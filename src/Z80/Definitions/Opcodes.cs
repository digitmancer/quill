namespace Quill.Z80
{
  public static class Opcodes
  {
    public readonly struct Opcode
    {
      public readonly Operation Operation;
      public readonly Operand Destination;
      public readonly Operand Source;

      public Opcode() : this(Operation.NOP, Operand.Implied, Operand.Implied) {}

      public Opcode(Operation op, Operand dst, Operand src)
      {
        Operation = op;
        Destination = dst;
        Source = src;
      }

      public bool IsWordOperation() => _wordOperands.Contains(Destination) ||
                                       _wordOperands.Contains(Source);

      public override string ToString() => $"{Operation} {Destination},{Source}";
    }

    private static readonly Operand[] _wordOperands = new Operand[]
    {      
      Operand.AF, 
      Operand.BC, 
      Operand.DE, 
      Operand.HL, 
      Operand.IX,  
      Operand.IY, 
      Operand.PC,
      Operand.SP
    };

    public static readonly Opcode[] Main = new Opcode[]
    {
      // Opcodes 0x00 - 0x0F
      new Opcode(Operation.NOP,  Operand.Implied,    Operand.Implied),
      new Opcode(Operation.LD,   Operand.BC,         Operand.Immediate),  
      new Opcode(Operation.LD,   Operand.BCi,        Operand.A),
      new Opcode(Operation.INC,  Operand.BC,         Operand.Implied),  
      new Opcode(Operation.INC,  Operand.B,          Operand.Implied),  
      new Opcode(Operation.DEC,  Operand.B,          Operand.Implied),  
      new Opcode(Operation.LD,   Operand.B,          Operand.Immediate),  
      new Opcode(Operation.RLCA, Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.EX,   Operand.AF,         Operand.Implied),  
      new Opcode(Operation.ADD,  Operand.HL,         Operand.BC),  
      new Opcode(Operation.LD,   Operand.A,          Operand.BCi),  
      new Opcode(Operation.DEC,  Operand.BC,         Operand.Implied),  
      new Opcode(Operation.INC,  Operand.C,          Operand.Implied),  
      new Opcode(Operation.DEC,  Operand.C,          Operand.Implied),  
      new Opcode(Operation.LD,   Operand.C,          Operand.Immediate),  
      new Opcode(Operation.RRCA, Operand.Implied,    Operand.Implied), 

      // Opcodes 0x10 - 0x1F
      new Opcode(Operation.DJNZ, Operand.D,          Operand.Implied),  
      new Opcode(Operation.LD,   Operand.DE,         Operand.Immediate),  
      new Opcode(Operation.LD,   Operand.DEi,        Operand.A),  
      new Opcode(Operation.INC,  Operand.DE,         Operand.Implied),  
      new Opcode(Operation.INC,  Operand.D,          Operand.Implied),  
      new Opcode(Operation.DEC,  Operand.D,          Operand.Implied),  
      new Opcode(Operation.LD,   Operand.D,          Operand.Immediate),  
      new Opcode(Operation.RLA,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.JR,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.ADD,  Operand.HL,         Operand.DE),  
      new Opcode(Operation.LD,   Operand.A,          Operand.DEi),  
      new Opcode(Operation.DEC,  Operand.DE,         Operand.Implied),  
      new Opcode(Operation.INC,  Operand.E,          Operand.Implied),  
      new Opcode(Operation.DEC,  Operand.E,          Operand.Implied),  
      new Opcode(Operation.LD,   Operand.E,          Operand.Immediate),  
      new Opcode(Operation.RRA,  Operand.Implied,    Operand.Implied),

      // Opcodes 0x20 - 0x2F
      new Opcode(Operation.JR,   Operand.NonZero,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.DE,         Operand.Immediate),  
      new Opcode(Operation.LD,   Operand.DEi,        Operand.A),  
      new Opcode(Operation.INC,  Operand.DE,         Operand.Implied),  
      new Opcode(Operation.INC,  Operand.D,          Operand.Implied),  
      new Opcode(Operation.DEC,  Operand.D,          Operand.Implied),  
      new Opcode(Operation.LD,   Operand.D,          Operand.Immediate),  
      new Opcode(Operation.DAA,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.JR,   Operand.Zero,       Operand.Implied),  
      new Opcode(Operation.ADD,  Operand.HL,         Operand.HL),  
      new Opcode(Operation.LD,   Operand.HL,         Operand.Indirect),  
      new Opcode(Operation.DEC,  Operand.HL,         Operand.Implied),  
      new Opcode(Operation.INC,  Operand.L,          Operand.Implied),  
      new Opcode(Operation.DEC,  Operand.L,          Operand.Implied),  
      new Opcode(Operation.LD,   Operand.L,          Operand.Implied),  
      new Opcode(Operation.CPL,  Operand.Implied,    Operand.Implied), 
        
      // Opcodes 0x30 - 0x3F  
      new Opcode(Operation.JR,   Operand.NonCarry,   Operand.Implied),  
      new Opcode(Operation.LD,   Operand.SP,         Operand.Immediate),  
      new Opcode(Operation.LD,   Operand.Indirect,   Operand.A),  
      new Opcode(Operation.INC,  Operand.SP,         Operand.Implied),  
      new Opcode(Operation.INC,  Operand.HLi,        Operand.Implied),  
      new Opcode(Operation.DEC,  Operand.HLi,        Operand.Implied),  
      new Opcode(Operation.LD,   Operand.HLi,        Operand.Immediate),  
      new Opcode(Operation.SCF,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.JR,   Operand.C,          Operand.Implied),  
      new Opcode(Operation.ADD,  Operand.HL,         Operand.SP),  
      new Opcode(Operation.LD,   Operand.A,          Operand.Indirect),  
      new Opcode(Operation.DEC,  Operand.SP,         Operand.Implied),  
      new Opcode(Operation.INC,  Operand.A,          Operand.Implied),  
      new Opcode(Operation.DEC,  Operand.A,          Operand.Implied),  
      new Opcode(Operation.LD,   Operand.A,          Operand.Immediate),  
      new Opcode(Operation.CCF,  Operand.Implied,    Operand.Implied),   
      
      // Opcodes 0x40 - 0x4F
      new Opcode(),
      new Opcode(Operation.LD,   Operand.B,          Operand.C),  
      new Opcode(Operation.LD,   Operand.B,          Operand.D),  
      new Opcode(Operation.LD,   Operand.B,          Operand.E),  
      new Opcode(Operation.LD,   Operand.B,          Operand.H),  
      new Opcode(Operation.LD,   Operand.B,          Operand.L),   
      new Opcode(Operation.LD,   Operand.B,          Operand.HLi),  
      new Opcode(Operation.LD,   Operand.B,          Operand.A),  
      new Opcode(Operation.LD,   Operand.C,          Operand.B),  
      new Opcode(),
      new Opcode(Operation.LD,   Operand.C,          Operand.D),  
      new Opcode(Operation.LD,   Operand.C,          Operand.E),  
      new Opcode(Operation.LD,   Operand.C,          Operand.H),  
      new Opcode(Operation.LD,   Operand.C,          Operand.L),  
      new Opcode(Operation.LD,   Operand.C,          Operand.HLi),  
      new Opcode(Operation.LD,   Operand.C,          Operand.A),

      // Opcodes 0x50 - 0x5F  
      new Opcode(Operation.LD,   Operand.D,          Operand.B),  
      new Opcode(Operation.LD,   Operand.D,          Operand.C),  
      new Opcode(),
      new Opcode(Operation.LD,   Operand.D,          Operand.E),  
      new Opcode(Operation.LD,   Operand.D,          Operand.H),  
      new Opcode(Operation.LD,   Operand.D,          Operand.L),  
      new Opcode(Operation.LD,   Operand.D,          Operand.HLi),  
      new Opcode(Operation.LD,   Operand.D,          Operand.A),  
      new Opcode(Operation.LD,   Operand.E,          Operand.B),  
      new Opcode(Operation.LD,   Operand.E,          Operand.C),  
      new Opcode(Operation.LD,   Operand.E,          Operand.D),  
      new Opcode(),
      new Opcode(Operation.LD,   Operand.E,          Operand.H),  
      new Opcode(Operation.LD,   Operand.E,          Operand.L),  
      new Opcode(Operation.LD,   Operand.E,          Operand.HLi),  
      new Opcode(Operation.LD,   Operand.E,          Operand.A),  

      // Opcodes 0x60 - 0x6F  
      new Opcode(Operation.LD,   Operand.H,          Operand.B),  
      new Opcode(Operation.LD,   Operand.H,          Operand.C),  
      new Opcode(Operation.LD,   Operand.H,          Operand.D),  
      new Opcode(Operation.LD,   Operand.H,          Operand.E),  
      new Opcode(),
      new Opcode(Operation.LD,   Operand.H,          Operand.L),  
      new Opcode(Operation.LD,   Operand.H,          Operand.HLi),  
      new Opcode(Operation.LD,   Operand.H,          Operand.A),  
      new Opcode(Operation.LD,   Operand.L,          Operand.B),  
      new Opcode(Operation.LD,   Operand.L,          Operand.C),  
      new Opcode(Operation.LD,   Operand.L,          Operand.D),  
      new Opcode(Operation.LD,   Operand.L,          Operand.E),  
      new Opcode(Operation.LD,   Operand.L,          Operand.H),  
      new Opcode(),
      new Opcode(Operation.LD,   Operand.L,          Operand.HLi),  
      new Opcode(Operation.LD,   Operand.L,          Operand.A),  

      // Opcodes 0x70 - 0x7F  
      new Opcode(Operation.LD,   Operand.HLi,        Operand.B),  
      new Opcode(Operation.LD,   Operand.HLi,        Operand.C),  
      new Opcode(Operation.LD,   Operand.HLi,        Operand.D),  
      new Opcode(Operation.LD,   Operand.HLi,        Operand.E),  
      new Opcode(Operation.LD,   Operand.HLi,        Operand.H),  
      new Opcode(Operation.LD,   Operand.HLi,        Operand.L),  
      new Opcode(Operation.HALT, Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.HLi,        Operand.A),  
      new Opcode(Operation.LD,   Operand.A,          Operand.B),  
      new Opcode(Operation.LD,   Operand.A,          Operand.C),  
      new Opcode(Operation.LD,   Operand.A,          Operand.D),  
      new Opcode(Operation.LD,   Operand.A,          Operand.E),  
      new Opcode(Operation.LD,   Operand.A,          Operand.H),  
      new Opcode(Operation.LD,   Operand.A,          Operand.L),   
      new Opcode(Operation.LD,   Operand.A,          Operand.HLi),  
      new Opcode(),

      // Opcodes 0x80 - 0x8F  
      new Opcode(Operation.ADD,  Operand.A,          Operand.B),  
      new Opcode(Operation.ADD,  Operand.A,          Operand.C),  
      new Opcode(Operation.ADD,  Operand.A,          Operand.D),  
      new Opcode(Operation.ADD,  Operand.A,          Operand.E),  
      new Opcode(Operation.ADD,  Operand.A,          Operand.H),  
      new Opcode(Operation.ADD,  Operand.A,          Operand.L),  
      new Opcode(Operation.ADD,  Operand.A,          Operand.HLi),  
      new Opcode(Operation.ADD,  Operand.A,          Operand.A),  
      new Opcode(Operation.ADC,  Operand.A,          Operand.B),  
      new Opcode(Operation.ADC,  Operand.A,          Operand.C),  
      new Opcode(Operation.ADC,  Operand.A,          Operand.D),  
      new Opcode(Operation.ADC,  Operand.A,          Operand.E),  
      new Opcode(Operation.ADC,  Operand.A,          Operand.H),  
      new Opcode(Operation.ADC,  Operand.A,          Operand.L),  
      new Opcode(Operation.ADC,  Operand.A,          Operand.HLi),  
      new Opcode(Operation.ADC,  Operand.A,          Operand.A),  

      // Opcodes 0x90 - 0x9F  
      new Opcode(Operation.SUB,  Operand.Implied,    Operand.B),  
      new Opcode(Operation.SUB,  Operand.Implied,    Operand.C),  
      new Opcode(Operation.SUB,  Operand.Implied,    Operand.D),  
      new Opcode(Operation.SUB,  Operand.Implied,    Operand.E),  
      new Opcode(Operation.SUB,  Operand.Implied,    Operand.H),  
      new Opcode(Operation.SUB,  Operand.Implied,    Operand.L),  
      new Opcode(Operation.SUB,  Operand.Implied,    Operand.HLi),  
      new Opcode(Operation.SUB,  Operand.Implied,    Operand.A), 
      new Opcode(Operation.SBC,  Operand.Implied,    Operand.B),  
      new Opcode(Operation.SBC,  Operand.Implied,    Operand.C),  
      new Opcode(Operation.SBC,  Operand.Implied,    Operand.D),  
      new Opcode(Operation.SBC,  Operand.Implied,    Operand.E),  
      new Opcode(Operation.SBC,  Operand.Implied,    Operand.H),  
      new Opcode(Operation.SBC,  Operand.Implied,    Operand.L),  
      new Opcode(Operation.SBC,  Operand.Implied,    Operand.HLi),  
      new Opcode(Operation.SBC,  Operand.Implied,    Operand.A),

      // Opcodes 0xA0 - 0xAF  
      new Opcode(Operation.AND,  Operand.Implied,    Operand.B),  
      new Opcode(Operation.AND,  Operand.Implied,    Operand.C),  
      new Opcode(Operation.AND,  Operand.Implied,    Operand.D),  
      new Opcode(Operation.AND,  Operand.Implied,    Operand.E),  
      new Opcode(Operation.AND,  Operand.Implied,    Operand.H),  
      new Opcode(Operation.AND,  Operand.Implied,    Operand.L),  
      new Opcode(Operation.AND,  Operand.Implied,    Operand.HLi),  
      new Opcode(Operation.AND,  Operand.Implied,    Operand.A),
      new Opcode(Operation.XOR,  Operand.Implied,    Operand.B),  
      new Opcode(Operation.XOR,  Operand.Implied,    Operand.C),  
      new Opcode(Operation.XOR,  Operand.Implied,    Operand.D),  
      new Opcode(Operation.XOR,  Operand.Implied,    Operand.E),  
      new Opcode(Operation.XOR,  Operand.Implied,    Operand.H),  
      new Opcode(Operation.XOR,  Operand.Implied,    Operand.L),  
      new Opcode(Operation.XOR,  Operand.Implied,    Operand.HLi),  
      new Opcode(Operation.XOR,  Operand.Implied,    Operand.A),

      // Opcodes 0xB0 - 0xBF  
      new Opcode(Operation.OR,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OR,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OR,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OR,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OR,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OR,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OR,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OR,   Operand.Implied,    Operand.Implied), 
      new Opcode(Operation.CP,   Operand.Implied,    Operand.B),  
      new Opcode(Operation.CP,   Operand.Implied,    Operand.C),  
      new Opcode(Operation.CP,   Operand.Implied,    Operand.D),  
      new Opcode(Operation.CP,   Operand.Implied,    Operand.E),  
      new Opcode(Operation.CP,   Operand.Implied,    Operand.H),  
      new Opcode(Operation.CP,   Operand.Implied,    Operand.L),  
      new Opcode(Operation.CP,   Operand.Implied,    Operand.HLi),  
      new Opcode(Operation.CP,   Operand.Implied,    Operand.A),

      // Opcodes 0xC0 - 0xCF  
      new Opcode(Operation.RET,  Operand.NonZero,    Operand.Implied),  
      new Opcode(Operation.POP,  Operand.BC,         Operand.Implied),  
      new Opcode(Operation.JP,   Operand.NonZero,    Operand.Immediate),  
      new Opcode(Operation.JP,   Operand.Implied,    Operand.Immediate),  
      new Opcode(Operation.CALL, Operand.NonZero,    Operand.Immediate),  
      new Opcode(Operation.PUSH, Operand.Implied,    Operand.BC),  
      new Opcode(Operation.ADD,  Operand.A,          Operand.Immediate),  
      new Opcode(Operation.RST,  Operand.RST0,       Operand.Implied),  
      new Opcode(Operation.RET,  Operand.Zero,       Operand.Implied),  
      new Opcode(Operation.RET,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.JP,   Operand.Zero,       Operand.Immediate),  
      new Opcode(Operation.NOP,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.CALL, Operand.Zero,       Operand.Immediate),  
      new Opcode(Operation.CALL, Operand.Implied,    Operand.Immediate),  
      new Opcode(Operation.ADC,  Operand.A,          Operand.Immediate),  
      new Opcode(Operation.RST,  Operand.RST1,       Operand.Implied),

      // Opcodes 0xD0 - 0xDF  
      new Opcode(Operation.RET,  Operand.NonCarry,   Operand.Implied),  
      new Opcode(Operation.POP,  Operand.DE,         Operand.Implied),  
      new Opcode(Operation.JP,   Operand.NonCarry,   Operand.Immediate),  
      new Opcode(Operation.OUT,  Operand.Immediate,  Operand.A),  
      new Opcode(Operation.CALL, Operand.NonCarry,   Operand.Immediate),  
      new Opcode(Operation.PUSH, Operand.Implied,    Operand.DE),  
      new Opcode(Operation.SUB,  Operand.Implied,    Operand.Immediate),  
      new Opcode(Operation.RST,  Operand.RST2,       Operand.Implied),  
      new Opcode(Operation.RET,  Operand.Carry,      Operand.Implied),  
      new Opcode(Operation.EXX,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.JP,   Operand.Carry,      Operand.Immediate),  
      new Opcode(Operation.IN,   Operand.A,          Operand.Immediate),  
      new Opcode(Operation.CALL, Operand.Carry,      Operand.Immediate),  
      new Opcode(Operation.NOP,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.SBC,  Operand.A,          Operand.Immediate),  
      new Opcode(Operation.RST,  Operand.RST3,       Operand.Implied),  

      // Opcodes 0xE0 - 0xEF  
      new Opcode(Operation.RET,  Operand.Even,       Operand.Implied),  
      new Opcode(Operation.POP,  Operand.HL,         Operand.Implied),  
      new Opcode(Operation.JP,   Operand.Even,       Operand.Immediate),  
      new Opcode(Operation.EX,   Operand.SP,         Operand.HL),  
      new Opcode(Operation.CALL, Operand.Even,       Operand.Immediate),  
      new Opcode(Operation.PUSH, Operand.Implied,    Operand.HL),  
      new Opcode(Operation.AND,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.RST,  Operand.RST4,       Operand.Implied),  
      new Opcode(Operation.RET,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.JP,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.JP,   Operand.Even,       Operand.Immediate),  
      new Opcode(Operation.EX,   Operand.DE,         Operand.HL),  
      new Opcode(Operation.CALL, Operand.Even,       Operand.Immediate),  
      new Opcode(Operation.NOP,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.XOR,  Operand.Implied,    Operand.Immediate),  
      new Opcode(Operation.RST,  Operand.RST5,       Operand.Implied),  

      // Opcodes 0xF0 - 0xFF  
      new Opcode(Operation.RET,  Operand.Positive,   Operand.Implied),  
      new Opcode(Operation.POP,  Operand.AF,         Operand.Implied),  
      new Opcode(Operation.JP,   Operand.Positive,   Operand.Immediate),  
      new Opcode(Operation.DI,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.CALL, Operand.Positive,   Operand.Immediate),  
      new Opcode(Operation.PUSH, Operand.Implied,    Operand.AF),  
      new Opcode(Operation.OR,   Operand.Implied,    Operand.Immediate),  
      new Opcode(Operation.RST,  Operand.RST6,       Operand.Implied),  
      new Opcode(Operation.RET,  Operand.Negative,   Operand.Implied),  
      new Opcode(Operation.LD,   Operand.SP,         Operand.HL),  
      new Opcode(Operation.JP,   Operand.Negative,   Operand.Implied),  
      new Opcode(Operation.EI,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.CALL, Operand.Negative,   Operand.Immediate),  
      new Opcode(Operation.NOP,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.CP,   Operand.Implied,    Operand.Immediate),  
      new Opcode(Operation.RST,  Operand.RST7,       Operand.Implied),  
    };

    public static readonly Opcode[] CB = new Opcode[]
    {
      // Opcodes 0x00 - 0x0F
      new Opcode(Operation.RLC,  Operand.B,          Operand.Implied),
      new Opcode(Operation.RLC,  Operand.C,          Operand.Implied),  
      new Opcode(Operation.RLC,  Operand.D,          Operand.Implied),
      new Opcode(Operation.RLC,  Operand.E,          Operand.Implied),  
      new Opcode(Operation.RLC,  Operand.H,          Operand.Implied),  
      new Opcode(Operation.RLC,  Operand.L,          Operand.Implied),  
      new Opcode(Operation.RLC,  Operand.HLi,        Operand.Implied),  
      new Opcode(Operation.RLC,  Operand.A,          Operand.Implied),  
      new Opcode(Operation.RRC,  Operand.B,          Operand.Implied),  
      new Opcode(Operation.RRC,  Operand.C,          Operand.Implied),  
      new Opcode(Operation.RRC,  Operand.D,          Operand.Implied),  
      new Opcode(Operation.RRC,  Operand.E,          Operand.Implied),  
      new Opcode(Operation.RRC,  Operand.H,          Operand.Implied),  
      new Opcode(Operation.RRC,  Operand.L,          Operand.Implied),  
      new Opcode(Operation.RRC,  Operand.HLi,        Operand.Implied),  
      new Opcode(Operation.RRC,  Operand.A,          Operand.Implied), 

      // Opcodes 0x10 - 0x1F
      new Opcode(Operation.RL,   Operand.B,          Operand.Implied),
      new Opcode(Operation.RL,   Operand.C,          Operand.Implied),
      new Opcode(Operation.RL,   Operand.D,          Operand.Implied),
      new Opcode(Operation.RL,   Operand.E,          Operand.Implied),
      new Opcode(Operation.RL,   Operand.H,          Operand.Implied),
      new Opcode(Operation.RL,   Operand.L,          Operand.Implied),
      new Opcode(Operation.RL,   Operand.HLi,        Operand.Implied),
      new Opcode(Operation.RL,   Operand.A,          Operand.Implied),
      new Opcode(Operation.RR,   Operand.B,          Operand.Implied),
      new Opcode(Operation.RR,   Operand.C,          Operand.Implied),
      new Opcode(Operation.RR,   Operand.D,          Operand.Implied),
      new Opcode(Operation.RR,   Operand.E,          Operand.Implied),
      new Opcode(Operation.RR,   Operand.H,          Operand.Implied),
      new Opcode(Operation.RR,   Operand.L,          Operand.Implied),
      new Opcode(Operation.RR,   Operand.HLi,        Operand.Implied),
      new Opcode(Operation.RR,   Operand.A,          Operand.Implied),
 
      // Opcodes 0x20 - 0x2F 
      new Opcode(Operation.SLA,  Operand.B,          Operand.Implied),  
      new Opcode(Operation.SLA,  Operand.C,          Operand.Implied),  
      new Opcode(Operation.SLA,  Operand.D,          Operand.Implied),
      new Opcode(Operation.SLA,  Operand.E,          Operand.Implied), 
      new Opcode(Operation.SLA,  Operand.H,          Operand.Implied), 
      new Opcode(Operation.SLA,  Operand.L,          Operand.Implied), 
      new Opcode(Operation.SLA,  Operand.HLi,        Operand.Implied),
      new Opcode(Operation.SLA,  Operand.A,          Operand.Implied), 
      new Opcode(Operation.SRA,  Operand.B,          Operand.Implied),  
      new Opcode(Operation.SRA,  Operand.C,          Operand.Implied),
      new Opcode(Operation.SRA,  Operand.D,          Operand.Implied),
      new Opcode(Operation.SRA,  Operand.E,          Operand.Implied), 
      new Opcode(Operation.SRA,  Operand.H,          Operand.Implied), 
      new Opcode(Operation.SRA,  Operand.L,          Operand.Implied), 
      new Opcode(Operation.SRA,  Operand.HLi,        Operand.Implied), 
      new Opcode(Operation.SRA,  Operand.A,          Operand.Implied),
        
      // Opcodes 0x30 - 0x3F  
      new Opcode(Operation.SLL,  Operand.B,          Operand.Implied),
      new Opcode(Operation.SLL,  Operand.C,          Operand.Implied),
      new Opcode(Operation.SLL,  Operand.D,          Operand.Implied),
      new Opcode(Operation.SLL,  Operand.E,          Operand.Implied),
      new Opcode(Operation.SLL,  Operand.H,          Operand.Implied),
      new Opcode(Operation.SLL,  Operand.L,          Operand.Implied),
      new Opcode(Operation.SLL,  Operand.HLi,        Operand.Implied),
      new Opcode(Operation.SLL,  Operand.A,          Operand.Implied),
      new Opcode(Operation.SRL,  Operand.B,          Operand.Implied),
      new Opcode(Operation.SRL,  Operand.C,          Operand.Implied),
      new Opcode(Operation.SRL,  Operand.D,          Operand.Implied),
      new Opcode(Operation.SRL,  Operand.E,          Operand.Implied),
      new Opcode(Operation.SRL,  Operand.H,          Operand.Implied),
      new Opcode(Operation.SRL,  Operand.L,          Operand.Implied),
      new Opcode(Operation.SRL,  Operand.HLi,        Operand.Implied),
      new Opcode(Operation.SRL,  Operand.A,          Operand.Implied),
      
      // Opcodes 0x40 - 0x4F 
      new Opcode(Operation.BIT,  Operand.Bit0,       Operand.B),   
      new Opcode(Operation.BIT,  Operand.Bit0,       Operand.C),   
      new Opcode(Operation.BIT,  Operand.Bit0,       Operand.D),   
      new Opcode(Operation.BIT,  Operand.Bit0,       Operand.E),   
      new Opcode(Operation.BIT,  Operand.Bit0,       Operand.H),   
      new Opcode(Operation.BIT,  Operand.Bit0,       Operand.L),   
      new Opcode(Operation.BIT,  Operand.Bit0,       Operand.HLi), 
      new Opcode(Operation.BIT,  Operand.Bit0,       Operand.A),   
      new Opcode(Operation.BIT,  Operand.Bit1,       Operand.B),   
      new Opcode(Operation.BIT,  Operand.Bit1,       Operand.C),   
      new Opcode(Operation.BIT,  Operand.Bit1,       Operand.D),   
      new Opcode(Operation.BIT,  Operand.Bit1,       Operand.E),   
      new Opcode(Operation.BIT,  Operand.Bit1,       Operand.H),   
      new Opcode(Operation.BIT,  Operand.Bit1,       Operand.L),   
      new Opcode(Operation.BIT,  Operand.Bit1,       Operand.HLi), 
      new Opcode(Operation.BIT,  Operand.Bit1,       Operand.A),   
      
      // Opcodes 0x50 - 0x5F 
      new Opcode(Operation.BIT,  Operand.Bit2,       Operand.B),   
      new Opcode(Operation.BIT,  Operand.Bit2,       Operand.C),   
      new Opcode(Operation.BIT,  Operand.Bit2,       Operand.D),   
      new Opcode(Operation.BIT,  Operand.Bit2,       Operand.E),   
      new Opcode(Operation.BIT,  Operand.Bit2,       Operand.H),   
      new Opcode(Operation.BIT,  Operand.Bit2,       Operand.L),   
      new Opcode(Operation.BIT,  Operand.Bit2,       Operand.HLi), 
      new Opcode(Operation.BIT,  Operand.Bit2,       Operand.A),   
      new Opcode(Operation.BIT,  Operand.Bit3,       Operand.B),   
      new Opcode(Operation.BIT,  Operand.Bit3,       Operand.C),   
      new Opcode(Operation.BIT,  Operand.Bit3,       Operand.D),   
      new Opcode(Operation.BIT,  Operand.Bit3,       Operand.E),   
      new Opcode(Operation.BIT,  Operand.Bit3,       Operand.H),   
      new Opcode(Operation.BIT,  Operand.Bit3,       Operand.L),   
      new Opcode(Operation.BIT,  Operand.Bit3,       Operand.HLi), 
      new Opcode(Operation.BIT,  Operand.Bit3,       Operand.A),   
      
      // Opcodes 0x60 - 0x6F 
      new Opcode(Operation.BIT,  Operand.Bit4,       Operand.B),   
      new Opcode(Operation.BIT,  Operand.Bit4,       Operand.C),   
      new Opcode(Operation.BIT,  Operand.Bit4,       Operand.D),   
      new Opcode(Operation.BIT,  Operand.Bit4,       Operand.E),   
      new Opcode(Operation.BIT,  Operand.Bit4,       Operand.H),   
      new Opcode(Operation.BIT,  Operand.Bit4,       Operand.L),   
      new Opcode(Operation.BIT,  Operand.Bit4,       Operand.HLi), 
      new Opcode(Operation.BIT,  Operand.Bit4,       Operand.A),   
      new Opcode(Operation.BIT,  Operand.Bit5,       Operand.B),   
      new Opcode(Operation.BIT,  Operand.Bit5,       Operand.C),   
      new Opcode(Operation.BIT,  Operand.Bit5,       Operand.D),   
      new Opcode(Operation.BIT,  Operand.Bit5,       Operand.E),   
      new Opcode(Operation.BIT,  Operand.Bit5,       Operand.H),   
      new Opcode(Operation.BIT,  Operand.Bit5,       Operand.L),   
      new Opcode(Operation.BIT,  Operand.Bit5,       Operand.HLi), 
      new Opcode(Operation.BIT,  Operand.Bit5,       Operand.A),   
      
      // Opcodes 0x70 - 0x7F 
      new Opcode(Operation.BIT,  Operand.Bit6,       Operand.B),  
      new Opcode(Operation.BIT,  Operand.Bit6,       Operand.C),  
      new Opcode(Operation.BIT,  Operand.Bit6,       Operand.D),  
      new Opcode(Operation.BIT,  Operand.Bit6,       Operand.E),  
      new Opcode(Operation.BIT,  Operand.Bit6,       Operand.H),  
      new Opcode(Operation.BIT,  Operand.Bit6,       Operand.L),  
      new Opcode(Operation.BIT,  Operand.Bit6,       Operand.Implied),  
      new Opcode(Operation.BIT,  Operand.Bit6,       Operand.A),  
      new Opcode(Operation.BIT,  Operand.Bit7,       Operand.B),  
      new Opcode(Operation.BIT,  Operand.Bit7,       Operand.C),  
      new Opcode(Operation.BIT,  Operand.Bit7,       Operand.D),  
      new Opcode(Operation.BIT,  Operand.Bit7,       Operand.E),  
      new Opcode(Operation.BIT,  Operand.Bit7,       Operand.H),  
      new Opcode(Operation.BIT,  Operand.Bit7,       Operand.L),   
      new Opcode(Operation.BIT,  Operand.Bit7,       Operand.HLi),  
      new Opcode(Operation.BIT,  Operand.Bit7,       Operand.Implied),
      
      // Opcodes 0x80 - 0x8F 
      new Opcode(Operation.RES,  Operand.Bit0,       Operand.B),   
      new Opcode(Operation.RES,  Operand.Bit0,       Operand.C),   
      new Opcode(Operation.RES,  Operand.Bit0,       Operand.D),   
      new Opcode(Operation.RES,  Operand.Bit0,       Operand.E),   
      new Opcode(Operation.RES,  Operand.Bit0,       Operand.H),   
      new Opcode(Operation.RES,  Operand.Bit0,       Operand.L),   
      new Opcode(Operation.RES,  Operand.Bit0,       Operand.HLi), 
      new Opcode(Operation.RES,  Operand.Bit0,       Operand.A),   
      new Opcode(Operation.RES,  Operand.Bit1,       Operand.B),   
      new Opcode(Operation.RES,  Operand.Bit1,       Operand.C),   
      new Opcode(Operation.RES,  Operand.Bit1,       Operand.D),   
      new Opcode(Operation.RES,  Operand.Bit1,       Operand.E),   
      new Opcode(Operation.RES,  Operand.Bit1,       Operand.H),   
      new Opcode(Operation.RES,  Operand.Bit1,       Operand.L),   
      new Opcode(Operation.RES,  Operand.Bit1,       Operand.HLi), 
      new Opcode(Operation.RES,  Operand.Bit1,       Operand.A),   

      // Opcodes 0x90 - 0x9F 
      new Opcode(Operation.RES,  Operand.Bit2,       Operand.B),   
      new Opcode(Operation.RES,  Operand.Bit2,       Operand.C),   
      new Opcode(Operation.RES,  Operand.Bit2,       Operand.D),   
      new Opcode(Operation.RES,  Operand.Bit2,       Operand.E),   
      new Opcode(Operation.RES,  Operand.Bit2,       Operand.H),   
      new Opcode(Operation.RES,  Operand.Bit2,       Operand.L),   
      new Opcode(Operation.RES,  Operand.Bit2,       Operand.HLi), 
      new Opcode(Operation.RES,  Operand.Bit2,       Operand.A),   
      new Opcode(Operation.RES,  Operand.Bit3,       Operand.B),   
      new Opcode(Operation.RES,  Operand.Bit3,       Operand.C),   
      new Opcode(Operation.RES,  Operand.Bit3,       Operand.D),   
      new Opcode(Operation.RES,  Operand.Bit3,       Operand.E),   
      new Opcode(Operation.RES,  Operand.Bit3,       Operand.H),   
      new Opcode(Operation.RES,  Operand.Bit3,       Operand.L),   
      new Opcode(Operation.RES,  Operand.Bit3,       Operand.HLi), 
      new Opcode(Operation.RES,  Operand.Bit3,       Operand.A),   
      
      // Opcodes 0xA0 - 0xAF 
      new Opcode(Operation.RES,  Operand.Bit4,       Operand.B),   
      new Opcode(Operation.RES,  Operand.Bit4,       Operand.C),   
      new Opcode(Operation.RES,  Operand.Bit4,       Operand.D),   
      new Opcode(Operation.RES,  Operand.Bit4,       Operand.E),   
      new Opcode(Operation.RES,  Operand.Bit4,       Operand.H),   
      new Opcode(Operation.RES,  Operand.Bit4,       Operand.L),   
      new Opcode(Operation.RES,  Operand.Bit4,       Operand.HLi), 
      new Opcode(Operation.RES,  Operand.Bit4,       Operand.A),   
      new Opcode(Operation.RES,  Operand.Bit5,       Operand.B),   
      new Opcode(Operation.RES,  Operand.Bit5,       Operand.C),   
      new Opcode(Operation.RES,  Operand.Bit5,       Operand.D),   
      new Opcode(Operation.RES,  Operand.Bit5,       Operand.E),   
      new Opcode(Operation.RES,  Operand.Bit5,       Operand.H),   
      new Opcode(Operation.RES,  Operand.Bit5,       Operand.L),   
      new Opcode(Operation.RES,  Operand.Bit5,       Operand.HLi), 
      new Opcode(Operation.RES,  Operand.Bit5,       Operand.A),   

      // Opcodes 0xB0 - 0xBF 
      new Opcode(Operation.RES,  Operand.Bit6,       Operand.B),  
      new Opcode(Operation.RES,  Operand.Bit6,       Operand.C),  
      new Opcode(Operation.RES,  Operand.Bit6,       Operand.D),  
      new Opcode(Operation.RES,  Operand.Bit6,       Operand.E),  
      new Opcode(Operation.RES,  Operand.Bit6,       Operand.H),  
      new Opcode(Operation.RES,  Operand.Bit6,       Operand.L),  
      new Opcode(Operation.RES,  Operand.Bit6,       Operand.HLi),
      new Opcode(Operation.RES,  Operand.Bit6,       Operand.A),  
      new Opcode(Operation.RES,  Operand.Bit7,       Operand.B),  
      new Opcode(Operation.RES,  Operand.Bit7,       Operand.C),  
      new Opcode(Operation.RES,  Operand.Bit7,       Operand.D),  
      new Opcode(Operation.RES,  Operand.Bit7,       Operand.E),  
      new Opcode(Operation.RES,  Operand.Bit7,       Operand.H),  
      new Opcode(Operation.RES,  Operand.Bit7,       Operand.L),   
      new Opcode(Operation.RES,  Operand.Bit7,       Operand.HLi),  
      new Opcode(Operation.RES,  Operand.Bit7,       Operand.A),

      // Opcodes 0xC0 - 0xCF 
      new Opcode(Operation.SET,  Operand.Bit0,       Operand.B),   
      new Opcode(Operation.SET,  Operand.Bit0,       Operand.C),   
      new Opcode(Operation.SET,  Operand.Bit0,       Operand.D),   
      new Opcode(Operation.SET,  Operand.Bit0,       Operand.E),   
      new Opcode(Operation.SET,  Operand.Bit0,       Operand.H),   
      new Opcode(Operation.SET,  Operand.Bit0,       Operand.L),   
      new Opcode(Operation.SET,  Operand.Bit0,       Operand.HLi), 
      new Opcode(Operation.SET,  Operand.Bit0,       Operand.A),   
      new Opcode(Operation.SET,  Operand.Bit1,       Operand.B),   
      new Opcode(Operation.SET,  Operand.Bit1,       Operand.C),   
      new Opcode(Operation.SET,  Operand.Bit1,       Operand.D),   
      new Opcode(Operation.SET,  Operand.Bit1,       Operand.E),   
      new Opcode(Operation.SET,  Operand.Bit1,       Operand.H),   
      new Opcode(Operation.SET,  Operand.Bit1,       Operand.L),   
      new Opcode(Operation.SET,  Operand.Bit1,       Operand.HLi), 
      new Opcode(Operation.SET,  Operand.Bit1,       Operand.A),   

      // Opcodes 0xD0 - 0xDF 
      new Opcode(Operation.SET,  Operand.Bit2,       Operand.B),   
      new Opcode(Operation.SET,  Operand.Bit2,       Operand.C),   
      new Opcode(Operation.SET,  Operand.Bit2,       Operand.D),   
      new Opcode(Operation.SET,  Operand.Bit2,       Operand.E),   
      new Opcode(Operation.SET,  Operand.Bit2,       Operand.H),   
      new Opcode(Operation.SET,  Operand.Bit2,       Operand.L),   
      new Opcode(Operation.SET,  Operand.Bit2,       Operand.HLi), 
      new Opcode(Operation.SET,  Operand.Bit2,       Operand.A),   
      new Opcode(Operation.SET,  Operand.Bit3,       Operand.B),   
      new Opcode(Operation.SET,  Operand.Bit3,       Operand.C),   
      new Opcode(Operation.SET,  Operand.Bit3,       Operand.D),   
      new Opcode(Operation.SET,  Operand.Bit3,       Operand.E),   
      new Opcode(Operation.SET,  Operand.Bit3,       Operand.H),   
      new Opcode(Operation.SET,  Operand.Bit3,       Operand.L),   
      new Opcode(Operation.SET,  Operand.Bit3,       Operand.HLi), 
      new Opcode(Operation.SET,  Operand.Bit3,       Operand.A),   

      // Opcodes 0xE0 - 0xEF 
      new Opcode(Operation.SET,  Operand.Bit4,       Operand.B),   
      new Opcode(Operation.SET,  Operand.Bit4,       Operand.C),   
      new Opcode(Operation.SET,  Operand.Bit4,       Operand.D),   
      new Opcode(Operation.SET,  Operand.Bit4,       Operand.E),   
      new Opcode(Operation.SET,  Operand.Bit4,       Operand.H),   
      new Opcode(Operation.SET,  Operand.Bit4,       Operand.L),   
      new Opcode(Operation.SET,  Operand.Bit4,       Operand.HLi), 
      new Opcode(Operation.SET,  Operand.Bit4,       Operand.A),   
      new Opcode(Operation.SET,  Operand.Bit5,       Operand.B),   
      new Opcode(Operation.SET,  Operand.Bit5,       Operand.C),   
      new Opcode(Operation.SET,  Operand.Bit5,       Operand.D),   
      new Opcode(Operation.SET,  Operand.Bit5,       Operand.E),   
      new Opcode(Operation.SET,  Operand.Bit5,       Operand.H),   
      new Opcode(Operation.SET,  Operand.Bit5,       Operand.L),   
      new Opcode(Operation.SET,  Operand.Bit5,       Operand.HLi), 
      new Opcode(Operation.SET,  Operand.Bit5,       Operand.A),   

      // Opcodes 0xF0 - 0xFF 
      new Opcode(Operation.SET,  Operand.Bit6,       Operand.B),  
      new Opcode(Operation.SET,  Operand.Bit6,       Operand.C),  
      new Opcode(Operation.SET,  Operand.Bit6,       Operand.D),  
      new Opcode(Operation.SET,  Operand.Bit6,       Operand.E),  
      new Opcode(Operation.SET,  Operand.Bit6,       Operand.H),  
      new Opcode(Operation.SET,  Operand.Bit6,       Operand.L),  
      new Opcode(Operation.SET,  Operand.Bit6,       Operand.HLi),
      new Opcode(Operation.SET,  Operand.Bit6,       Operand.A),  
      new Opcode(Operation.SET,  Operand.Bit7,       Operand.B),  
      new Opcode(Operation.SET,  Operand.Bit7,       Operand.C),  
      new Opcode(Operation.SET,  Operand.Bit7,       Operand.D),  
      new Opcode(Operation.SET,  Operand.Bit7,       Operand.E),  
      new Opcode(Operation.SET,  Operand.Bit7,       Operand.H),  
      new Opcode(Operation.SET,  Operand.Bit7,       Operand.L),   
      new Opcode(Operation.SET,  Operand.Bit7,       Operand.HLi),  
      new Opcode(Operation.SET,  Operand.Bit7,       Operand.A)
    };

    public static readonly Opcode[] DD = new Opcode[]
    {
      // Opcodes 0x00 - 0x0F
      new Opcode(),
      new Opcode(),  
      new Opcode(),
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.ADD,  Operand.IX,         Operand.BC),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(), 
  
      // Opcodes 0x10 - 0x1F
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.ADD,  Operand.IX,         Operand.DE),  
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),

      // Opcodes 0x20 - 0x2F
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.IX,         Operand.Immediate),  
      new Opcode(Operation.LD,   Operand.Indirect,   Operand.IX),
      new Opcode(Operation.INC,  Operand.IX,         Operand.Implied), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(),
      new Opcode(), 
      new Opcode(),  
      new Opcode(Operation.ADD,  Operand.IX,         Operand.IX),  
      new Opcode(Operation.LD,   Operand.IX,         Operand.Indirect),
      new Opcode(Operation.DEC,  Operand.IX,         Operand.Implied), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(),

      // Opcodes 0x30 - 0x3F
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.INC,  Operand.IXd,        Operand.Implied),
      new Opcode(Operation.DEC,  Operand.IXd,        Operand.Implied),
      new Opcode(Operation.LD,   Operand.IXd,        Operand.Immediate),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.ADD,  Operand.IX,         Operand.SP),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),

      // Opcodes 0x40 - 0x4F
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.B,          Operand.IXd),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.C,          Operand.IXd),
      new Opcode(),

      // Opcodes 0x50 - 0x5F
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.D,          Operand.IXd),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.E,          Operand.IXd),
      new Opcode(),

      // Opcodes 0x60 - 0x6F
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.H,          Operand.IXd),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.L,          Operand.IXd),
      new Opcode(),

      // Opcodes 0x70 - 0x7F
      new Opcode(Operation.LD,   Operand.IXd,        Operand.B),  
      new Opcode(Operation.LD,   Operand.IXd,        Operand.C),  
      new Opcode(Operation.LD,   Operand.IXd,        Operand.D),  
      new Opcode(Operation.LD,   Operand.IXd,        Operand.E),  
      new Opcode(Operation.LD,   Operand.IXd,        Operand.H),  
      new Opcode(Operation.LD,   Operand.IXd,        Operand.L),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.IXd,        Operand.A),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.A,          Operand.IXd),  
      new Opcode(),

      // Opcodes 0x80 - 0x8F
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.ADD,  Operand.A,          Operand.IXd),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.ADC,  Operand.A,          Operand.IXd),
      new Opcode(),

      // Opcodes 0x90 - 0x9F
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.SUB,  Operand.Implied,    Operand.IXd),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.SBC,  Operand.A,          Operand.IXd),
      new Opcode(),

      // Opcodes 0xA0 - 0xAF
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.AND,  Operand.Implied,    Operand.IXd),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.XOR,  Operand.Implied,    Operand.IXd),
      new Opcode(),

      // Opcodes 0xB0 - 0xBF
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.OR,   Operand.Implied,    Operand.IXd),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.CP,   Operand.Implied,    Operand.IXd),
      new Opcode(),

      // Opcodes 0xC0 - 0xCF
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(),

      // Opcodes 0xD0 - 0xDF
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(),

      // Opcodes 0xE0 - 0xEF
      new Opcode(),
      new Opcode(Operation.POP,   Operand.IX,         Operand.Implied),
      new Opcode(),
      new Opcode(Operation.EX,    Operand.SP,         Operand.IX),
      new Opcode(),
      new Opcode(Operation.PUSH,  Operand.Implied,    Operand.IX),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.JP,    Operand.Implied,    Operand.IX),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),

      // Opcodes 0xF0 - 0xFF
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,    Operand.SP,         Operand.IX),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode()
    };
    
    public static readonly Opcode[] DDCB = new Opcode[]
    {// Opcodes 0x00 - 0x0F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.ADD,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  

      // Opcodes 0x10 - 0x1F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.ADD,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  

      // Opcodes 0x20 - 0x2F
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.INC,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.ADD,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.DEC,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  

      // Opcodes 0x30 - 0x3F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.INC,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.DEC,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.ADD,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  

      // Opcodes 0x40 - 0x4F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0x50 - 0x5F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0x60 - 0x6F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0x70 - 0x7F
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0x80 - 0x8F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.ADD,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.ADC,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0x90 - 0x9F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.SUB,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.SBC,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0xA0 - 0xAF
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.AND,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.XOR,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0xB0 - 0xBF
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.OR,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.CP,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0xC0 - 0xCF
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  

      // Opcodes 0xD0 - 0xDF
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  

      // Opcodes 0xE0 - 0xEF
      new Opcode(),  
      new Opcode(Operation.POP,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(Operation.EX,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(Operation.PUSH, Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.JP,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  

      // Opcodes 0xF0 - 0xFF
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode()
    };
    
    public static readonly Opcode[] ED = new Opcode[]
    {
      // Opcodes 0x00 - 0x0F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),
      
      // Opcodes 0x10 - 0x1F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),

      // Opcodes 0x20 - 0x2F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),

      // Opcodes 0x30 - 0x3F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),

      // Opcodes 0x40 - 0x4F
      new Opcode(Operation.IN,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OUT,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.SBC,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.NEG,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.RETN, Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.IM,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.IN,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OUT,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.ADC,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(Operation.RETI, Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),

      // Opcodes 0x50 - 0x5F
      new Opcode(Operation.IN,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(Operation.SBC,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.IM,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.IN,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OUT,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.ADC,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.IM,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),

      // Opcodes 0x60 - 0x6F
      new Opcode(Operation.IN,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(Operation.SBC,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.RRD,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.IN,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OUT,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.ADC,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.RLD,  Operand.Implied,    Operand.Implied),

      // Opcodes 0x70 - 0x7F
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.SBC,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.IN,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OUT,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.ADC,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),

      // Opcodes 0x80 - 0x8F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),

      // Opcodes 0x90 - 0x9F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),

      // Opcodes 0xA0 - 0xAF
      new Opcode(Operation.LDI,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.CPI,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.INI,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OUTI, Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LDD,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.CPD,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.IND,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OUTD, Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),

      // Opcodes 0xB0 - 0xBF
      new Opcode(Operation.LDIR, Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.CPIR, Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.INIR, Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OTIR, Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LDDR, Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.CPDR, Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.INDR, Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.OTDR, Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode()
    };
    
    public static readonly Opcode[] FD = new Opcode[]
    {
      // Opcodes 0x00 - 0x0F
      new Opcode(),
      new Opcode(),  
      new Opcode(),
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.ADD,  Operand.IY,         Operand.BC),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(), 
  
      // Opcodes 0x10 - 0x1F
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.ADD,  Operand.IY,         Operand.DE),  
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),

      // Opcodes 0x20 - 0x2F
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.IY,         Operand.Immediate),  
      new Opcode(Operation.LD,   Operand.Indirect,   Operand.IY),
      new Opcode(Operation.INC,  Operand.IY,         Operand.Implied), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(),
      new Opcode(), 
      new Opcode(),  
      new Opcode(Operation.ADD,  Operand.IY,         Operand.IY),  
      new Opcode(Operation.LD,   Operand.IY,         Operand.Indirect),
      new Opcode(Operation.DEC,  Operand.IY,         Operand.Implied), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(),

      // Opcodes 0x30 - 0x3F
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.INC,  Operand.IYd,        Operand.Implied),
      new Opcode(Operation.DEC,  Operand.IYd,        Operand.Implied),
      new Opcode(Operation.LD,   Operand.IYd,        Operand.Immediate),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.ADD,  Operand.IY,         Operand.SP),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),

      // Opcodes 0x40 - 0x4F
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.B,          Operand.IYd),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.C,          Operand.IYd),
      new Opcode(),

      // Opcodes 0x50 - 0x5F
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.D,          Operand.IYd),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.E,          Operand.IYd),
      new Opcode(),

      // Opcodes 0x60 - 0x6F
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.H,          Operand.IYd),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.L,          Operand.IYd),
      new Opcode(),

      // Opcodes 0x70 - 0x7F
      new Opcode(Operation.LD,   Operand.IYd,        Operand.B),  
      new Opcode(Operation.LD,   Operand.IYd,        Operand.C),  
      new Opcode(Operation.LD,   Operand.IYd,        Operand.D),  
      new Opcode(Operation.LD,   Operand.IYd,        Operand.E),  
      new Opcode(Operation.LD,   Operand.IYd,        Operand.H),  
      new Opcode(Operation.LD,   Operand.IYd,        Operand.L),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.IYd,        Operand.A),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.A,          Operand.IYd),  
      new Opcode(),

      // Opcodes 0x80 - 0x8F
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.ADD,  Operand.A,          Operand.IYd),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.ADC,  Operand.A,          Operand.IYd),
      new Opcode(),

      // Opcodes 0x90 - 0x9F
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.SUB,  Operand.Implied,    Operand.IYd),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.SBC,  Operand.A,          Operand.IYd),
      new Opcode(),

      // Opcodes 0xA0 - 0xAF
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.AND,  Operand.Implied,    Operand.IYd),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.XOR,  Operand.Implied,    Operand.IYd),
      new Opcode(),

      // Opcodes 0xB0 - 0xBF
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.OR,   Operand.Implied,    Operand.IYd),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.CP,   Operand.Implied,    Operand.IYd),
      new Opcode(),

      // Opcodes 0xC0 - 0xCF
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(),

      // Opcodes 0xD0 - 0xDF
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(), 
      new Opcode(),

      // Opcodes 0xE0 - 0xEF
      new Opcode(),
      new Opcode(Operation.POP,  Operand.IY,         Operand.Implied),
      new Opcode(),
      new Opcode(Operation.EX,   Operand.SP,         Operand.IY),
      new Opcode(),
      new Opcode(Operation.PUSH, Operand.Implied,    Operand.IY),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.JP,   Operand.Implied,    Operand.IY),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),

      // Opcodes 0xF0 - 0xFF
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(Operation.LD,   Operand.SP,         Operand.IY),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode(),
      new Opcode()
    };
    
    public static readonly Opcode[] FDCB = new Opcode[]
    {
      // Opcodes 0x00 - 0x0F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.ADD,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  

      // Opcodes 0x10 - 0x1F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.ADD,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  

      // Opcodes 0x20 - 0x2F
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.INC,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.ADD,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.DEC,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  

      // Opcodes 0x30 - 0x3F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.INC,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.DEC,  Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.ADD,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  

      // Opcodes 0x40 - 0x4F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0x50 - 0x5F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0x60 - 0x6F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0x70 - 0x7F
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0x80 - 0x8F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.ADD,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.ADC,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0x90 - 0x9F
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.SUB,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.SBC,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0xA0 - 0xAF
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.AND,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.XOR,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0xB0 - 0xBF
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.OR,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.CP,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  

      // Opcodes 0xC0 - 0xCF
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  

      // Opcodes 0xD0 - 0xDF
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  

      // Opcodes 0xE0 - 0xEF
      new Opcode(),  
      new Opcode(Operation.POP,  Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(Operation.EX,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(Operation.PUSH, Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.JP,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  

      // Opcodes 0xF0 - 0xFF
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(Operation.LD,   Operand.Implied,    Operand.Implied),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode(),  
      new Opcode()
    };
  }
}